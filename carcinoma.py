# -*- coding: utf-8 -*-
"""Carcinoma.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1AEhS2_EF9CPQPRswKJetIVBbJyb1q4mD
"""

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

df = pd.read_csv('./drive/My Drive/Practice/cancer_classification.csv')

sns.countplot(x='benign_0__mal_1',data=df)

df.corr()['benign_0__mal_1'][:-1].sort_values().plot(kind='bar')

sns.heatmap(df.corr())

X = df.drop('benign_0__mal_1' , axis=1).values
y = df['benign_0__mal_1'].values

from sklearn.model_selection import train_test_split
X_train , X_test , y_train , y_test = train_test_split(X,y,test_size=0.25,random_state=101)

from sklearn.preprocessing import MinMaxScaler
scaler = MinMaxScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.fit_transform(X_test)

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense , Dropout

model = Sequential()

model.add(Dense(30,activation='relu'))
model.add(Dense(15,activation='relu'))
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy' ,optimizer='adam')

model.fit(x=X_train , y=y_train , epochs=400 , validation_data=(X_test , y_test))

losses = pd.DataFrame(model.history.history)
losses.plot()

model = Sequential()

model.add(Dense(30,activation='relu'))
model.add(Dense(15,activation='relu'))
model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy' ,optimizer='adam')

from tensorflow.keras.callbacks import EarlyStopping

early_stop = EarlyStopping(monitor = 'val_loss' , mode ='min',verbose=1,patience = 25)

model.fit(x=X_train , y=y_train , epochs=600 , validation_data=(X_test , y_test),callbacks=[early_stop])

modelloss = pd.DataFrame(model.history.history)
modelloss.plot()

from tensorflow.keras.layers import Dropout

model = Sequential()

model.add(Dense(30,activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(15,activation='relu'))
model.add(Dropout(0.5))

model.add(Dense(1,activation='sigmoid'))

model.compile(loss='binary_crossentropy' ,optimizer='adam')

model.fit(x=X_train , y=y_train , epochs=600 , validation_data=(X_test , y_test),callbacks=[early_stop])

modeloss = pd.DataFrame(model.history.history)
modeloss.plot()

predictions = model.predict_classes(X_test)

from sklearn.metrics import classification_report,confusion_matrix

print(classification_report(y_test,predictions))

print(confusion_matrix(y_test,predictions))

